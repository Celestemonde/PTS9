#!/usr/bin/env python
# -*- coding: utf8 -*-
# *****************************************************************
# **       PTS -- Python Toolkit for working with SKIRT          **
# **       Â© Astronomical Observatory, Ghent University          **
# *****************************************************************

## \package pts.visual.plottemperaturecuts Plot planar cuts through the medium temperature in a SKIRT simulation
#
# This module offers functions to plot planar cuts through the medium temperature in a SKIRT simulation.
#

# -----------------------------------------------------------------

import logging
import matplotlib.pyplot as plt
import pts.simulation as sm
import pts.utils as ut

# -----------------------------------------------------------------

## This function creates a plot of the dust temperature cuts generated by the DefaultDustTemperatureCutsProbe
# in a SKIRT simulation.
#
# The function accepts a single Simulation instance and it assumes that the simulation includes exactly one
# DefaultDustTemperatureCutsProbe. If this is not the case, the function does nothing.
#
# The plot file path is interpreted as described for the pts.utils.absPath() function.
# If no plot path is given, the figure is not saved and it is left open so that is displayed in notebooks.
#
def plotDefaultDustTemperatureCuts(simulation, *, plotFilePath=None, figSize=None):

    # find the relevant probe
    probes = [ probe for probe in simulation.probes() if probe.type() == "DefaultDustTemperatureCutsProbe" ]
    if len(probes) != 1:
        return
    probe = probes[0]

    # load the temperature cuts and the range of the x and y axes
    # (there can be one to three cuts depending on symmetries)
    paths = probe.outFilePaths("dust_T_*.fits")
    numcuts = len(paths)
    if not numcuts in (1,2,3):
        return
    cuts = [ path.stem.split("_")[-1] for path in paths ]
    frames = [ sm.loadFits(path) for path in paths ]
    grids = [ sm.getFitsAxes(path) for path in paths ]

    # determine the maximum temperature value to display
    Tmax = max([ frame.max() for frame in frames ])

    # setup the figure depending on the number of cuts
    if figSize is None: figSize = (8*numcuts,6)
    fig, axes = plt.subplots(ncols=numcuts, nrows=1, figsize=figSize)
    if numcuts==1: axes = [axes]

    # plot the cuts and set axis details for each
    for ax, cut, frame, (xgrid, ygrid) in zip(axes, cuts, frames, grids):
        extent = (xgrid[0].value, xgrid[-1].value, ygrid[0].value, ygrid[-1].value)
        im = ax.imshow(frame.value, vmin=0, vmax=Tmax.value, cmap='gnuplot', extent=extent,
                       aspect='equal', interpolation='bicubic', origin='lower')
        ax.set_xlim(xgrid[0].value, xgrid[-1].value)
        ax.set_ylim(ygrid[0].value, ygrid[-1].value)
        ax.set_xlabel(cut[0] + sm.latexForUnit(xgrid.unit), fontsize='large')
        ax.set_ylabel(cut[-1] + sm.latexForUnit(ygrid.unit), fontsize='large')
        ax.set_ylabel(cut[-1] + sm.latexForUnit(ygrid.unit), fontsize='large')

    # add a color bar
    fig.colorbar(im, ax=axes).ax.set_ylabel("T" + sm.latexForUnit(frame.unit), fontsize='large')

    # if a filepath is provided, save the figure; otherwise leave it open
    if plotFilePath is not None:
        plotpath = ut.absPath(plotFilePath)
        plt.savefig(plotpath, bbox_inches='tight', pad_inches=0.25)
        plt.close()
        logging.info("Created dust temperature plot {}".format(plotpath))

# ----------------------------------------------------------------------
